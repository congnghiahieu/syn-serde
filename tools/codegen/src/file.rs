use std::{
    path::{Path, PathBuf},
    process::Command,
};

use anyhow::{bail, Result};
use fs_err as fs;
use proc_macro2::TokenStream;

pub(crate) fn root_dir() -> PathBuf {
    let mut dir = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    dir.pop(); // codegen
    dir.pop(); // tools
    dir
}

fn header() -> String {
    concat!(
        "// This file is @generated by ",
        env!("CARGO_BIN_NAME"),
        ".\n",
        "// It is not intended for manual editing.\n",
        "\n",
    )
    .into()
}

pub(crate) fn write(path: &Path, content: &TokenStream) -> Result<()> {
    fs::write(path, header() + &content.to_string())?;
    let status = Command::new("rustfmt")
        .arg(path)
        .args(&["--config", "normalize_doc_attributes=true,format_macro_matchers=true"])
        .status()?;
    if !status.success() {
        bail!("rustfmt didn't exit successfully");
    }
    Ok(())
}
