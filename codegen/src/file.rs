use proc_macro2::TokenStream;
use std::{
    fs,
    path::Path,
    process::{Command, Stdio},
};
use tempfile::Builder;

use crate::Result;

pub(crate) fn manifest_dir<'a>() -> &'a Path {
    const CARGO_MANIFEST_DIR: &str = env!("CARGO_MANIFEST_DIR");
    Path::new(CARGO_MANIFEST_DIR)
}

pub(crate) fn write(path: impl AsRef<Path>, content: TokenStream) -> Result<()> {
    let mut formatted = Vec::new();
    formatted.extend_from_slice(b"// This file is @generated by syn-serde-internal-codegen.\n");
    formatted.extend_from_slice(b"// It is not intended for manual editing.\n");
    formatted.push(b'\n');

    let outdir = Builder::new().prefix("codegen").tempdir()?;
    let outfile_path = outdir.path().join("generated");
    fs::write(&outfile_path, content.to_string())?;

    // Run rustfmt
    write_rustfmt_config(outdir.path())?;
    // Ignore any errors.
    let _ = Command::new("rustfmt").arg(&outfile_path).stderr(Stdio::null()).status();

    formatted.extend(fs::read(&outfile_path)?);

    if path.as_ref().is_file() && fs::read(&path)? == formatted {
        return Ok(());
    }

    fs::write(path, formatted)?;
    Ok(())
}

fn write_rustfmt_config(outdir: &Path) -> Result<()> {
    let rustfmt_config_path = outdir.join(".rustfmt.toml");
    let mut rustfmt_config = Vec::new();
    let workspace_config_path = manifest_dir().join("../.rustfmt.toml");
    if workspace_config_path.is_file() {
        rustfmt_config = fs::read(workspace_config_path)?;
    }
    rustfmt_config.extend_from_slice(b"normalize_doc_attributes = true\n");
    rustfmt_config.extend_from_slice(b"format_macro_matchers = true\n");
    fs::write(rustfmt_config_path, rustfmt_config)?;
    Ok(())
}
