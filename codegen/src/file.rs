use proc_macro2::TokenStream;
use std::{
    fs,
    path::Path,
    process::{Command, Stdio},
};
use tempfile::Builder;

use crate::Result;

pub(crate) fn write(path: impl AsRef<Path>, content: TokenStream) -> Result<()> {
    let mut formatted = Vec::new();
    formatted.extend_from_slice(b"// This file is @generated by syn-serde-internal-codegen.\n");
    formatted.extend_from_slice(b"// It is not intended for manual editing.\n");
    formatted.push(b'\n');

    let outdir = Builder::new().prefix("codegen").tempdir()?;
    let outfile_path = outdir.path().join("expanded");
    fs::write(&outfile_path, content.to_string())?;

    // Run rustfmt
    // https://github.com/dtolnay/cargo-expand/blob/0.4.9/src/main.rs#L181-L182
    let rustfmt_config_path = outdir.path().join("rustfmt.toml");
    let mut rustfmt_config = fs::read("../rustfmt.toml")?;
    rustfmt_config.extend_from_slice(b"normalize_doc_attributes = true\n");
    rustfmt_config.extend_from_slice(b"format_macro_matchers = true\n");
    fs::write(rustfmt_config_path, rustfmt_config)?;

    // Ignore any errors.
    let _status = Command::new("rustfmt").arg(&outfile_path).stderr(Stdio::null()).status();

    formatted.extend(fs::read(&outfile_path)?);

    if path.as_ref().is_file() && fs::read(&path)? == formatted {
        return Ok(());
    }

    fs::write(path, formatted)?;
    Ok(())
}
